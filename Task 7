Q1: Given a sorted array of n integers and a target value, find the index of the target value in the array. Show the all active items [divided half] at every stage. Handle the situation when the target value is not found. 
 
#include <iostream> 
#include <vector> 
 
int binarySearch(const std::vector<int>& arr, int target) {     int left = 0; 
    int right = arr.size() - 1; 
 
    while (left <= right) { 
        int mid = left + (right - left) / 2;  
 
        std::cout << "Active items: ";         for (int i = left; i <= right; ++i) {             std::cout << arr[i] << " "; 
        } 
        std::cout << "\n"; 
 
        if (arr[mid] == target) {             return mid;  
        } else if (arr[mid] < target) {             left = mid + 1;  
        } else {             right = mid - 1;  
        } 
    } 
 
    return -1;  
} 
 
int main() { 
    std::vector<int> arr = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};     int target; 
 
    std::cout << "Enter target value: ";     std::cin >> target; 
 
    int result = binarySearch(arr, target); 
    if (result != -1) { 
        std::cout << "Target found at index: " << result << std::endl; 
    } else { 
        std::cout << "Target not found in the array." << std::endl; 
    } 
 
    return 0; 
} 
 
Q2: Given a sorted array of n integers and a target value, find the first occurrence of the target value in the array. 
 
#include <iostream> 
#include <vector> 
 
int findFirstOccurrence(const std::vector<int>& arr, int target) {     int left = 0; 
    int right = arr.size() - 1;     int result = -1;  
 
    while (left <= right) { 
        int mid = left + (right - left) / 2; 
 
        if (arr[mid] == target) {             result = mid;              right = mid - 1; half         } else if (arr[mid] < target) {             left = mid + 1;  
        } else { 
            right = mid - 1;  
        } 
    } 
    return result;  
} 
 
int main() { 
    std::vector<int> arr = {1, 2, 2, 2, 3, 4, 5, 5, 6, 7};     int target; 
 
    std::cout << "Enter target value: ";     std::cin >> target; 
 
    int result = findFirstOccurrence(arr, target); 
 
    if (result != -1) { 
        std::cout << "First occurrence of target found at index: " << result << std::endl; 
    } else { 
        std::cout << "Target not found in the array." << std::endl; 
    } 
 
    return 0; 
 
 
Q3: Given a sorted array of n integers and a target value, find the last occurrence of the target value in the array. 
 
#include <iostream> 
#include <vector> 
 
int findLastOccurrence(const std::vector<int>& arr, int target) {     int left = 0; 
    int right = arr.size() - 1;     int result = -1;  
 
    while (left <= right) { 
        int mid = left + (right - left) / 2; 
        if (arr[mid] == target) {             result = mid;              left = mid + 1;  
        } else if (arr[mid] < target) {             left = mid + 1;  
        } else {             right = mid - 1;  
        } 
    } 
 
    return result;  
} 
 
int main() { 
    std::vector<int> arr = {1, 2, 2, 2, 3, 4, 5, 5, 6, 7};     int target; 
 
    std::cout << "Enter target value: "; 
std::cin >> target; 
 
    int result = findLastOccurrence(arr, target); 
 
    if (result != -1) { 
        std::cout << "Last occurrence of target found at index: " << result << std::endl; 
    } else { 
        std::cout << "Target not found in the array." << std::endl; 
    } 
 
    return 0; 
} 
 
Q4: Given a sorted array of n integers and a target value, find the number of occurrences of the target value in the array. 
 
#include <iostream> 
#include <vector> 
 
int findFirstOccurrence(const std::vector<int>& arr, int target) {     int left = 0; 
    int right = arr.size() - 1;     int result = -1;  
 
    while (left <= right) { 
        int mid = left + (right - left) / 2; 
 
        if (arr[mid] == target) {             result = mid;              right = mid - 1;  
        } else if (arr[mid] < target) {             left = mid + 1;  
        } else { 
            right = mid - 1;  
        } 
} 
 
    return result;  
} 
 
int findLastOccurrence(const std::vector<int>& arr, int target) {     int left = 0; 
    int right = arr.size() - 1;     int result = -1;  
 
    while (left <= right) { 
        int mid = left + (right - left) / 2; 
 
        if (arr[mid] == target) {             result = mid;              left = mid + 1;  
        } else if (arr[mid] < target) {             left = mid + 1;  
        } else { 
            right = mid - 1;  
        } 
    } 
 
    return result;  
} 
 
int countOccurrences(const std::vector<int>& arr, int target) {     int firstIndex = findFirstOccurrence(arr, target);     if (firstIndex == -1) {         return 0;  
    } 
     
    int lastIndex = findLastOccurrence(arr, target);     return lastIndex - firstIndex + 1;  
} 
 
int main() { 
    std::vector<int> arr = {1, 2, 2, 2, 3, 4, 5, 5, 6, 7};     int target; 
 
std::cout << "Enter target value: "; 
    std::cin >> target; 
 
    int count = countOccurrences(arr, target); 
 
    if (count > 0) { 
        std::cout << "Number of occurrences of target " << target << ": " << count << std::endl; 
    } else { 
        std::cout << "Target not found in the array." << std::endl; 
    } 
 
    return 0; 
} 
